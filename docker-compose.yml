version: "3.8"

services:
  auth:
    build:
      context: .
      dockerfile: docker/auth.Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  ride-match:
    build:
      context: .
      dockerfile: docker/ride_match.Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  driver-location:
    build:
      context: .
      dockerfile: docker/driver_location.Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy

  trip:
    build:
      context: .
      dockerfile: docker/trip.Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  db:
    image: postgres:15
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

volumes:
  pgdata:
  kafka_data:
